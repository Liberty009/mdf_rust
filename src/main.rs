use mdf_rust::mdf3;
use std::fs;

fn main() {
    let file = fs::read("example3.30.mdf").expect("msg");

    //let dg = mdf3::list(&file);
    let channels = mdf3::list_channels(&file);

    println!("Number of channels: {}", channels.len());

    for (i, channel) in channels.iter().enumerate() {
        println!("Channel {} Name: {}", i, channel.name(&file, true));
    }
}

#[cfg(test)]
mod tests {

    use mdf_rust::mdf3;
    use mdf_rust::utils;
    #[test]
    fn idblock() {
        let id_data = [
            0x4D, 0x44, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2E, 0x33, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x61, 0x6D, 0x64, 0x66, 0x36, 0x34, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x4A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let (id_block, position, endian) = mdf3::IDBLOCK::read(&id_data);

        assert_eq!(position, 64);
        assert_eq!(endian, true);
        assert!(utils::eq(
            &id_block.format_id,
            &[0x33, 0x2E, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00,]
        ));
        assert!(utils::eq(
            &id_block.program_id,
            &[0x61, 0x6D, 0x64, 0x66, 0x36, 0x34, 0x34, 0x00,]
        ));
        assert_eq!(id_block.default_float_format, 0);
        assert_eq!(id_block.version_number, 330);
        assert_eq!(id_block.code_page_number, 0);
        assert!(utils::eq(&id_block.reserved1, &[0, 0]));
        assert!(utils::eq(
            &id_block.reserved2,
            &[
                00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
                00, 00, 00, 00, 00, 00, 00, 00, 00,
            ]
        ))
    }

    #[test]
    fn hdblock() {
        let hd_data = [
            0x48, 0x44, 0xD0, 0x00, 0xD8, 0xDF, 0x10, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x06, 0x00, 0x32, 0x32, 0x3A, 0x31, 0x31, 0x3A, 0x32, 0x30, 0x31, 0x38,
            0x31, 0x34, 0x3A, 0x32, 0x36, 0x3A, 0x33, 0x35, 0x4A, 0x61, 0x63, 0x6B, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x46, 0xF9,
            0x75, 0x78, 0x69, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x20,
            0x50, 0x43, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54,
            0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x58,
            0xCC, 0x02, 0x3C, 0x48, 0x44, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x78,
            0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77,
            0x77, 0x77, 0x2E, 0x61, 0x73, 0x61, 0x6D, 0x2E, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x64,
            0x66, 0x2F, 0x76, 0x34, 0x22, 0x3E, 0x3C, 0x54, 0x58, 0x3E, 0x44, 0x61, 0x74, 0x65,
            0x3A, 0x20, 0x32, 0x32, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x31, 0x38, 0x0D, 0x0A,
            0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x31, 0x35, 0x3A, 0x32, 0x37, 0x0D, 0x0A, 0x52,
            0x65, 0x63, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x44, 0x75, 0x72, 0x61, 0x74,
            0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A, 0x31, 0x32, 0x0D,
            0x0A, 0xA7, 0x40, 0x0D, 0x0A, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3A,
            0x20, 0x54, 0x65, 0x73, 0x74, 0x0D, 0x0A, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6D,
            0x65, 0x6E, 0x74, 0x3A, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6D, 0x65, 0x6E,
            0x74, 0x0D, 0x0A, 0x57, 0x6F, 0x72, 0x6B, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3A, 0x20,
            0x57, 0x6F, 0x72, 0x6B, 0x73, 0x70, 0x61, 0x63, 0x65, 0x0D, 0x0A, 0x44, 0x65, 0x76,
            0x69, 0x63, 0x65, 0x73, 0x3A, 0x20, 0x45, 0x54, 0x4B, 0x20, 0x74, 0x65, 0x73, 0x74,
            0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3A, 0x31, 0x0D, 0x0A, 0x50, 0x72, 0x6F,
            0x67, 0x72, 0x61, 0x6D, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
            0x6F, 0x6E, 0x3A, 0x20, 0x41, 0x53, 0x41, 0x50, 0x32, 0x5F,
        ];

        let (hd_block, position) = mdf3::HDBLOCK::read(&hd_data, true);

        println!("Length {}", position);
        assert_eq!(position, 208);

        assert_eq!(hd_block.block_size, 208);
        assert_eq!(hd_block.data_group_block, 1105880);
        assert_eq!(hd_block.file_comment, 272);
        assert_eq!(hd_block.program_block, 0);
        assert_eq!(hd_block.data_group_number, 6);
        assert!(utils::eq(
            &hd_block.date,
            &[0x32, 0x32, 0x3A, 0x31, 0x31, 0x3A, 0x32, 0x30, 0x31, 0x38,]
        ));
        assert!(utils::eq(
            &hd_block.time,
            &[0x31, 0x34, 0x3A, 0x32, 0x36, 0x3A, 0x33, 0x35,]
        ));
        assert!(utils::eq(
            &hd_block.author,
            &[
                0x4A, 0x61, 0x63, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ]
        ));
        assert!(utils::eq(
            &hd_block.department,
            &[
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ]
        ));
        assert!(utils::eq(
            &hd_block.project,
            &[
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ]
        ));
        assert!(utils::eq(
            &hd_block.subject,
            &[
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ]
        ));
        assert_eq!(hd_block.timestamp, 1542896795439737088);
        assert_eq!(hd_block.utc_time_offset, 0);
        assert_eq!(hd_block.time_quality, 0);
        assert!(utils::eq(
            &hd_block.timer_id,
            &[
                0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x50, 0x43, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72,
                0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ]
        ));
    }

    #[test]
    fn txblock() {
        let tx_data = [
            0x54, 0x58, 0xCC, 0x02, 0x3C, 0x48, 0x44, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74,
            0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
            0x2F, 0x77, 0x77, 0x77, 0x2E, 0x61, 0x73, 0x61, 0x6D, 0x2E, 0x6E, 0x65, 0x74, 0x2F,
            0x6D, 0x64, 0x66, 0x2F, 0x76, 0x34, 0x22, 0x3E, 0x3C, 0x54, 0x58, 0x3E, 0x44, 0x61,
            0x74, 0x65, 0x3A, 0x20, 0x32, 0x32, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x31, 0x38,
            0x0D, 0x0A, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x31, 0x35, 0x3A, 0x32, 0x37, 0x0D,
            0x0A, 0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x44, 0x75, 0x72,
            0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A, 0x31,
            0x32, 0x0D, 0x0A, 0xA7, 0x40, 0x0D, 0x0A, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
            0x65, 0x3A, 0x20, 0x54, 0x65, 0x73, 0x74, 0x0D, 0x0A, 0x45, 0x78, 0x70, 0x65, 0x72,
            0x69, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6D,
            0x65, 0x6E, 0x74, 0x0D, 0x0A, 0x57, 0x6F, 0x72, 0x6B, 0x73, 0x70, 0x61, 0x63, 0x65,
            0x3A, 0x20, 0x57, 0x6F, 0x72, 0x6B, 0x73, 0x70, 0x61, 0x63, 0x65, 0x0D, 0x0A, 0x44,
            0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3A, 0x20, 0x45, 0x54, 0x4B, 0x20, 0x74, 0x65,
            0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3A, 0x31, 0x0D, 0x0A, 0x50,
            0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
            0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x41, 0x53, 0x41, 0x50, 0x32, 0x5F, 0x44, 0x65,
            0x6D, 0x6F, 0x5F, 0x56, 0x31, 0x37, 0x31, 0x0D, 0x0A, 0x57, 0x50, 0x3A, 0x20, 0x41,
            0x53, 0x41, 0x50, 0x32, 0x5F, 0x44, 0x65, 0x6D, 0x6F, 0x5F, 0x56, 0x31, 0x37, 0x31,
            0x5F, 0x31, 0x0D, 0x0A, 0x52, 0x50, 0x3A, 0x20, 0x41, 0x53, 0x41, 0x50, 0x32, 0x5F,
            0x44, 0x65, 0x6D, 0x6F, 0x5F, 0x56, 0x31, 0x37, 0x31, 0x0D, 0x0A, 0x44, 0x61, 0x74,
            0x65, 0x3A, 0x20, 0x31, 0x31, 0x2F, 0x32, 0x32, 0x2F, 0x32, 0x30, 0x31, 0x38, 0x0D,
            0x0A, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x30, 0x33, 0x3A, 0x32, 0x36, 0x3A, 0x33,
            0x35, 0x20, 0x50, 0x4D, 0x0D, 0x0A, 0x50, 0x72, 0x65, 0x2D, 0x74, 0x72, 0x69, 0x67,
            0x67, 0x65, 0x72, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x30, 0x5B, 0x73, 0x5D,
            0x0D, 0x0A, 0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x44, 0x75,
            0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A,
            0x31, 0x32, 0x0D, 0x0A, 0x50, 0x6F, 0x73, 0x74, 0x2D, 0x74, 0x72, 0x69, 0x67, 0x67,
            0x65, 0x72, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x30, 0x5B, 0x73, 0x5D, 0x3C,
            0x2F, 0x54, 0x58, 0x3E, 0x3C, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x73, 0x6F, 0x75, 0x72,
            0x63, 0x65, 0x3E, 0x49, 0x4E, 0x43, 0x41, 0x20, 0x50, 0x43, 0x20, 0x52, 0x65, 0x66,
            0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x3C, 0x2F, 0x74,
            0x69, 0x6D, 0x65, 0x5F, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x3E, 0x3C, 0x63, 0x6F,
            0x6D, 0x6D, 0x6F, 0x6E, 0x5F, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
            0x73, 0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x73, 0x75, 0x62,
            0x6A, 0x65, 0x63, 0x74, 0x22, 0x3E, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69,
            0x63, 0x6C, 0x65, 0x3C, 0x2F, 0x65, 0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65,
            0x3D, 0x22, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x22, 0x3E, 0x50, 0x32, 0x30,
            0x31, 0x36, 0x5F, 0x30, 0x39, 0x5F, 0x41, 0x45, 0x5F, 0x4D, 0x43, 0x44, 0x5F, 0x32,
            0x4D, 0x43, 0x5F, 0x42, 0x53, 0x5F, 0x56, 0x31, 0x5F, 0x37, 0x5F, 0x31, 0x5F, 0x6D,
            0x61, 0x69, 0x6E, 0x3C, 0x2F, 0x65, 0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65,
            0x3D, 0x22, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3E,
            0x43, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x3C, 0x2F, 0x65,
            0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x61, 0x75, 0x74, 0x68,
            0x6F, 0x72, 0x22, 0x3E, 0x55, 0x73, 0x65, 0x72, 0x4E, 0x61, 0x6D, 0x65, 0x3C, 0x2F,
            0x65, 0x3E, 0x3C, 0x2F, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x5F, 0x70, 0x72, 0x6F,
            0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3E, 0x3C, 0x2F, 0x48, 0x44, 0x63, 0x6F,
            0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x3E, 0x0A, 0x53, 0x61, 0x74, 0x20, 0x4F, 0x63, 0x74,
            0x20, 0x20, 0x32, 0x20, 0x31, 0x35, 0x3A, 0x33, 0x35, 0x3A, 0x31, 0x33, 0x20, 0x32,
            0x30, 0x32, 0x31, 0x3A, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
            0x79, 0x20, 0x61, 0x73, 0x61, 0x6D, 0x6D, 0x64, 0x66, 0x20, 0x36, 0x2E, 0x34, 0x2E,
            0x34, 0x00, 0x04, 0x19, 0x60, 0x9C, 0xAE, 0xDD, 0xBC, 0x3F, 0x00,
        ];

        let text = r#"<HDcomment xmlns="http://www.asam.net/mdf/v4"><TX>Date: 22.11.2018
		Time: 15:27
		Recording Duration: 00:00:12
		 @
		Database: Test
		Experiment: Experiment
		Workspace: Workspace
		Devices: ETK test device:1
		Program Description: ASAP2_Demo_V171
		WP: ASAP2_Demo_V171_1
		RP: ASAP2_Demo_V171
		Date: 11/22/2018
		Time: 03:26:35 PM
		Pre-trigger Time: 0[s]
		Recording Duration: 00:00:12
		Post-trigger Time: 0[s]</TX><time_source>INCA PC Reference Time</time_source><common_properties><e name="subject">TestVehicle</e><e name="project">P2016_09_AE_MCD_2MC_BS_V1_7_1_main</e><e name="department">CompanyName</e><e name="author">UserName</e></common_properties></HDcomment>
		Sat Oct  2 15:35:13 2021: updated by asammdf 6.4.4"#;

        let _text_bytes = text.as_bytes();

        let (_tx_block, position) = mdf3::TXBLOCK::read(&tx_data, true);

        //println!("Pos: {}", position);
        //println!("String: {}END", str::from_utf8(&tx_block.text).expect(""));
        assert_eq!(position, 715);

        //println!("Found length: {}, Set Length: {}", tx_block.text.len(), text_bytes.len());
        //assert!(utils::eq(&tx_block.text, text_bytes));
    }

    #[test]
    fn prblock() {
        let pr_data = [
            0x50, 0x52, 0xFD, 0x10, 0x38, 0x89, 0x06, 0x26, 0x40, 0x5A, 0x12, 0xEC, 0xD9, 0x7C,
            0xBC, 0x39, 0x26, 0x40, 0x64, 0x32, 0xA5, 0xE8, 0xC1, 0xEF, 0x6C, 0x26, 0x40, 0x6E,
            0xB2, 0x28, 0x3D, 0x07, 0x23, 0xA0, 0x26, 0x40, 0x78, 0x92, 0x76, 0xD7, 0x4C, 0x56,
            0xD3, 0x26, 0x40, 0x82, 0xD2, 0x8E, 0xB7, 0x92, 0x89, 0x06, 0x27, 0x40, 0x8C, 0x52,
            0x71, 0xDD, 0xD8, 0xBC, 0x39, 0x27, 0x40, 0x96, 0x52, 0x1E, 0x49, 0x1F, 0xF0, 0x6C,
            0x27, 0x40, 0xA0, 0x92, 0x95, 0xFA, 0x65, 0x23, 0xA0, 0x27, 0x40, 0xAA, 0x52, 0xD7,
            0xF1, 0xAC, 0x56, 0xD3, 0x27, 0x40, 0xB4, 0x52, 0xE3, 0x2E, 0xF4, 0x89, 0x06, 0x28,
            0x40, 0xBE, 0xB2, 0xB9, 0xB1, 0x3B, 0xBD, 0x39, 0x28, 0x40, 0xC8, 0x72, 0x5A, 0x7A,
            0x83, 0xF0, 0x6C, 0x28, 0x40, 0xD2, 0x92, 0x9B, 0x70, 0xCA, 0x23, 0xA0, 0x28, 0x40,
            0xDC, 0x52, 0xE8, 0x62, 0xFA, 0x56, 0xD3, 0x28, 0x40, 0xE6, 0x10, 0xA4, 0x20, 0x1C,
            0x58, 0x33, 0x97, 0x3F, 0xF4, 0x19, 0x08, 0xD2, 0xFB, 0x5F, 0x64, 0xB8, 0xA0, 0x3F,
            0xF7, 0x1C, 0x08, 0x52, 0xE7, 0xB1, 0x1C, 0xD7, 0xA5, 0x3F, 0xFA, 0x1E, 0x08, 0xF2,
            0xD2, 0x03, 0xD5, 0xF5, 0xAA, 0x3F, 0xFD, 0x21, 0x04, 0x39, 0xDF, 0xAA, 0x46, 0x0A,
            0xB0, 0x3F, 0x00, 0x23, 0x04, 0xF9, 0xD4, 0xD3, 0xA2, 0x99, 0xB2, 0x3F, 0x03, 0x26,
            0x04, 0xB9, 0xCA, 0xFC, 0xFE, 0x28, 0xB5, 0x3F, 0x06, 0x28, 0x04, 0x79, 0xC0, 0x25,
            0x5B, 0xB8, 0xB7, 0x3F, 0x09, 0x2B, 0x04, 0x39, 0xB6, 0x4E, 0xB7, 0x47, 0xBA, 0x3F,
            0x0D, 0x2D, 0x04, 0x09, 0xAC, 0x77, 0x13, 0xD7, 0xBC, 0x3F, 0x10, 0x30, 0x04, 0xC9,
            0xA1, 0xA0, 0x6F, 0x66, 0xBF, 0x3F, 0x13, 0x32, 0x82, 0xC4, 0xCB, 0xE4, 0xE5, 0xFA,
            0xC0, 0x3F, 0x16, 0x35, 0x82, 0xA4, 0x46, 0xF9, 0x93, 0x42, 0xC2, 0x3F, 0x19, 0x37,
            0x82, 0x8C, 0xC1, 0x0D, 0x42, 0x8A, 0xC3, 0x3F, 0x1C, 0x39, 0x82, 0x6C, 0x3C, 0x22,
            0xF0, 0xD1, 0xC4, 0x3F, 0x1F, 0x3C, 0x82, 0x4C, 0xB7, 0x36, 0x9E, 0x19, 0xC6, 0x3F,
            0x23, 0x3E, 0x82, 0x2C, 0x32, 0x4B, 0x4C, 0x61, 0xC7, 0x3F, 0x26, 0x41, 0x82, 0x0C,
            0xAD, 0x5F, 0xFA, 0xA8, 0xC8, 0x3F, 0x29, 0x43, 0x82, 0xEC, 0x27, 0x74, 0xA8, 0xF0,
            0xC9, 0x3F, 0x2C, 0x45, 0x82, 0xD4, 0xA2, 0x88, 0x56, 0x38, 0xCB, 0x3F, 0x2F, 0x47,
            0x82, 0xB4, 0x1D, 0x9D, 0x04, 0x80, 0xCC, 0x3F, 0x32, 0x4A, 0x82, 0x94, 0x98, 0xB1,
            0xB2, 0xC7, 0xCD, 0x3F, 0x35, 0x4C, 0x82, 0x74, 0x13, 0xC6, 0x60, 0x0F, 0xCF, 0x3F,
            0x38, 0x4E, 0x41, 0x2E, 0x47, 0x6D, 0x87, 0x2B, 0xD0, 0x3F, 0x3C, 0x51, 0x41, 0x9E,
            0x84, 0x77, 0x5E, 0xCF, 0xD0, 0x3F, 0x3F, 0x53, 0x41, 0x0E, 0xC2, 0x81, 0x35, 0x73,
            0xD1, 0x3F, 0x42, 0x55, 0x41, 0x7E, 0xFF, 0x8B, 0x0C, 0x17, 0xD2, 0x3F, 0x45, 0x57,
            0x41, 0xEE, 0x3C, 0x96, 0xE3, 0xBA, 0xD2, 0x3F, 0x48, 0x59, 0x41, 0x5E, 0x7A, 0xA0,
            0xBA, 0x5E, 0xD3, 0x3F, 0x4B, 0x5C, 0x41, 0xD2, 0xB7, 0xAA, 0x91, 0x02, 0xD4, 0x3F,
            0x4E, 0x5E, 0x41, 0x42, 0xF5, 0xB4, 0x68, 0xA6, 0xD4, 0x3F, 0x51, 0x60, 0x41, 0xB2,
            0x32, 0xBF, 0x3F, 0x4A, 0xD5, 0x3F, 0x54, 0x62, 0x41, 0x22, 0x70, 0xC9, 0x16, 0xEE,
            0xD5, 0x3F, 0x57, 0x64, 0x41, 0x96, 0xAD, 0xD3, 0xED, 0x91, 0xD6, 0x3F, 0x5A, 0x66,
            0x41, 0x06, 0xEB, 0xDD, 0xC4, 0x35, 0xD7, 0x3F, 0x5E, 0x68, 0x41, 0x76, 0x28, 0xE8,
            0x9B, 0xD9, 0xD7, 0x3F, 0x61, 0x6B, 0x41, 0xE6, 0x65, 0xF2, 0x72, 0x7D, 0xD8, 0x3F,
            0x64, 0x6D, 0x41, 0x56, 0xA3, 0xFC, 0x49, 0x21, 0xD9, 0x3F, 0x67, 0x6F, 0x41, 0xC6,
            0xE0, 0x06, 0x21, 0xC5, 0xD9, 0x3F, 0x6A, 0x71, 0x41, 0x3A, 0x1E, 0x11, 0xF8, 0x68,
            0xDA, 0x3F, 0x6D, 0x73, 0x41, 0xAA, 0x5B, 0x1B, 0xCF, 0x0C, 0xDB, 0x3F, 0x70, 0x75,
            0x41, 0x1A, 0x99, 0x25, 0xA6, 0xB0, 0xDB, 0x3F, 0x73, 0x77, 0x41, 0x8A, 0xD6, 0x2F,
            0x7D, 0x54, 0xDC, 0x3F, 0x76, 0x79, 0x41, 0xFE, 0x13, 0x3A, 0x54, 0xF8, 0xDC, 0x3F,
            0x79, 0x7B, 0x41, 0x6E, 0x51, 0x44, 0x2B, 0x9C, 0xDD, 0x3F, 0x7C, 0x7D, 0x41, 0xDE,
            0x8E, 0x4E, 0x02, 0x40, 0xDE, 0x3F, 0x7F, 0x7F, 0x41, 0x4E, 0xCC, 0x58, 0xD9, 0xE3,
            0xDE, 0x3F, 0x82, 0x80, 0x41, 0xBE, 0x09, 0x63, 0xB0, 0x87, 0xDF, 0x3F, 0x85, 0x82,
            0x20, 0x97, 0xA3, 0xB6, 0xC3, 0x15, 0xE0, 0x3F, 0x88, 0x84, 0x20, 0x51, 0xC2, 0x3B,
            0xAF, 0x67, 0xE0, 0x3F, 0x8B, 0x86, 0x20, 0x09, 0xE1, 0xC0, 0x9A, 0xB9, 0xE0, 0x3F,
            0x8E, 0x88, 0x20, 0xC1, 0xFF, 0x45, 0x86, 0x0B, 0xE1, 0x3F, 0x91, 0x8A, 0x20, 0x79,
            0x1E, 0xCB, 0x71, 0x5D, 0xE1, 0x3F, 0x94, 0x8C, 0x20, 0x33, 0x3D, 0x50, 0x5D, 0xAF,
            0xE1, 0x3F, 0x97, 0x8D, 0x20, 0xEB, 0x5B, 0xD5, 0x48, 0x01, 0xE2, 0x3F, 0x9A, 0x8F,
            0x20, 0xA3, 0x7A, 0x5A, 0x34, 0x53, 0xE2, 0x3F, 0x9D, 0x91, 0x20, 0x5B, 0x99, 0xDF,
            0x1F, 0xA5, 0xE2, 0x3F, 0xA0, 0x93, 0x20, 0x13, 0xB8, 0x64, 0x0B, 0xF7, 0xE2, 0x3F,
            0xA3, 0x95, 0x20, 0xCB, 0xD6, 0xE9, 0xF6, 0x48, 0xE3, 0x3F, 0xA6, 0x96, 0x20, 0x85,
            0xF5, 0x6E, 0xE2, 0x9A, 0xE3, 0x3F, 0xA9, 0x98, 0x20, 0x3D, 0x14, 0xF4, 0xCD, 0xEC,
            0xE3, 0x3F, 0xAC, 0x9A, 0x20, 0xF5, 0x32, 0x79, 0xB9, 0x3E, 0xE4, 0x3F, 0xAE, 0x9B,
            0x20, 0xAD, 0x51, 0xFE, 0xA4, 0x90, 0xE4, 0x3F, 0xB1, 0x9D, 0x20, 0x67, 0x70, 0x83,
            0x90, 0xE2, 0xE4, 0x3F, 0xB4, 0x9F, 0x20, 0x1F, 0x8F, 0x08, 0x7C, 0x34, 0xE5, 0x3F,
            0xB7, 0xA0, 0x20, 0xD7, 0xAD, 0x8D, 0x67, 0x86, 0xE5, 0x3F, 0xBA, 0xA2, 0x20, 0x8F,
            0xCC, 0x12, 0x53, 0xD8, 0xE5, 0x3F, 0xBD, 0xA3, 0x20, 0x47, 0xEB, 0x97, 0x3E, 0x2A,
            0xE6, 0x3F, 0xC0, 0xA5, 0x20, 0xFF, 0x09, 0x1D, 0x2A, 0x7C, 0xE6, 0x3F, 0xC3, 0xA7,
            0x20, 0xB9, 0x28, 0xA2, 0x15, 0xCE, 0xE6, 0x3F, 0xC6, 0xA8, 0x20, 0x71, 0x47, 0x27,
            0x01, 0x20, 0xE7, 0x3F, 0xC8, 0xAA, 0x20, 0x29, 0x66, 0xAC, 0xEC, 0x71, 0xE7, 0x3F,
            0xCB, 0xAB, 0x20, 0xE1, 0x84, 0x31, 0xD8, 0xC3, 0xE7, 0x3F, 0xCE, 0xAD, 0x20, 0x9B,
            0xA3, 0xB6, 0xC3, 0x15, 0xE8, 0x3F, 0xD1, 0xAE, 0x20, 0x53, 0xC2, 0x3B, 0xAF, 0x67,
            0xE8, 0x3F, 0xD4, 0xB0, 0x20, 0x0B, 0xE1, 0xC0, 0x9A, 0xB9, 0xE8, 0x3F, 0xD6, 0xB1,
            0x20, 0xC3, 0xFF, 0x45, 0x86, 0x0B, 0xE9, 0x3F, 0xD9, 0xB2, 0x20, 0x7B, 0x1E, 0xCB,
            0x71, 0x5D, 0xE9, 0x3F, 0xDC, 0xB4, 0x20, 0x33, 0x3D, 0x50, 0x5D, 0xAF, 0xE9, 0x3F,
            0xDF, 0xB5, 0x20, 0xED, 0x5B, 0xD5, 0x48, 0x01, 0xEA, 0x3F, 0xE2, 0xB7, 0x20, 0xA5,
            0x7A, 0x5A, 0x34, 0x53, 0xEA, 0x3F, 0xE4, 0xB8, 0x20, 0x5D, 0x99, 0xDF, 0x1F, 0xA5,
            0xEA, 0x3F, 0xE7, 0xB9, 0x20, 0x15, 0xB8, 0x64, 0x0B, 0xF7, 0xEA, 0x3F, 0xEA, 0xBB,
            0x20, 0xCF, 0xD6, 0xE9, 0xF6, 0x48, 0xEB, 0x3F, 0xED, 0xBC, 0x20, 0x87, 0xF5, 0x6E,
            0xE2, 0x9A, 0xEB, 0x3F, 0xEF, 0xBD, 0x20, 0x3F, 0x14, 0xF4, 0xCD, 0xEC, 0xEB, 0x3F,
            0xF2, 0xBE, 0x20, 0xF7, 0x32, 0x79, 0xB9, 0x3E, 0xEC, 0x3F, 0xF5, 0xC0, 0x20, 0xAF,
            0x51, 0xFE, 0xA4, 0x90, 0xEC, 0x3F, 0xF7, 0xC1, 0x20, 0x67, 0x70, 0x83, 0x90, 0xE2,
            0xEC, 0x3F, 0xFA, 0xC2, 0x20, 0x21, 0x8F, 0x08, 0x7C, 0x34, 0xED, 0x3F, 0xFD, 0xC3,
            0x20, 0xD9, 0xAD, 0x8D, 0x67, 0x86, 0xED, 0x3F, 0xFF, 0xC4, 0x20, 0x91, 0xCC, 0x12,
            0x53, 0xD8, 0xED, 0x3F, 0x02, 0xC6, 0x20, 0x49, 0xEB, 0x97, 0x3E, 0x2A, 0xEE, 0x3F,
            0x05, 0xC7, 0x20, 0x03, 0x0A, 0x1D, 0x2A, 0x7C, 0xEE, 0x3F, 0x07, 0xC8, 0x20, 0xBB,
            0x28, 0xA2, 0x15, 0xCE, 0xEE, 0x3F, 0x0A, 0xC9, 0x20, 0x73, 0x47, 0x27, 0x01, 0x20,
            0xEF, 0x3F, 0x0D, 0xCA, 0x20, 0x2B, 0x66, 0xAC, 0xEC, 0x71, 0xEF, 0x3F, 0x0F, 0xCB,
            0x20, 0xE3, 0x84, 0x31, 0xD8, 0xC3, 0xEF, 0x3F, 0x12, 0xCC, 0x90, 0xCD, 0x51, 0xDB,
            0xE1, 0x0A, 0xF0, 0x3F, 0x14, 0xCD, 0x90, 0x2A, 0xE1, 0x9D, 0xD7, 0x33, 0xF0, 0x3F,
            0x17, 0xCE, 0x90, 0x86, 0x70, 0x60, 0xCD, 0x5C, 0xF0, 0x3F, 0x19, 0xCF, 0x90, 0xE2,
            0xFF, 0x22, 0xC3, 0x85, 0xF0, 0x3F, 0x1C, 0xD0, 0x90, 0x3E, 0x8F, 0xE5, 0xB8, 0xAE,
            0xF0, 0x3F, 0x1E, 0xD1, 0x90, 0x9B, 0x1E, 0xA8, 0xAE, 0xD7, 0xF0, 0x3F, 0x21, 0xD2,
            0x90, 0xF7, 0xAD, 0x6A, 0xA4, 0x00, 0xF1, 0x3F, 0x23, 0xD3, 0x90, 0x53, 0x3D, 0x2D,
            0x9A, 0x29, 0xF1, 0x3F, 0x26, 0xD4, 0x90, 0xAF, 0xCC, 0xEF, 0x8F, 0x52, 0xF1, 0x3F,
            0x28, 0xD5, 0x90, 0x0B, 0x5C, 0xB2, 0x85, 0x7B, 0xF1, 0x3F, 0x2B, 0xD5, 0x90, 0x67,
            0xEB, 0x74, 0x7B, 0xA4, 0xF1, 0x3F, 0x2D, 0xD6, 0x90, 0xC4, 0x7A, 0x37, 0x71, 0xCD,
            0xF1, 0x3F, 0x30, 0xD7, 0x90, 0x20, 0x0A, 0xFA, 0x66, 0xF6, 0xF1, 0x3F, 0x32, 0xD8,
            0x90, 0x7C, 0x99, 0xBC, 0x5C, 0x1F, 0xF2, 0x3F, 0x35, 0xD9, 0x90, 0xD8, 0x28, 0x7F,
            0x52, 0x48, 0xF2, 0x3F, 0x37, 0xD9, 0x90, 0x35, 0xB8, 0x41, 0x48, 0x71, 0xF2, 0x3F,
            0x39, 0xDA, 0x90, 0x91, 0x47, 0x04, 0x3E, 0x9A, 0xF2, 0x3F, 0x3C, 0xDB, 0x90, 0xED,
            0xD6, 0xC6, 0x33, 0xC3, 0xF2, 0x3F, 0x3E, 0xDB, 0x90, 0x49, 0x66, 0x89, 0x29, 0xEC,
            0xF2, 0x3F, 0x41, 0xDC, 0x90, 0xA5, 0xF5, 0x4B, 0x1F, 0x15, 0xF3, 0x3F, 0x43, 0xDD,
            0x90, 0x01, 0x85, 0x0E, 0x15, 0x3E, 0xF3, 0x3F, 0x45, 0xDD, 0x90, 0x5E, 0x14, 0xD1,
            0x0A, 0x67, 0xF3, 0x3F, 0x47, 0xDE, 0x90, 0xBA, 0xA3, 0x93, 0x00, 0x90, 0xF3, 0x3F,
            0x4A, 0xDF, 0x90, 0x16, 0x33, 0x56, 0xF6, 0xB8, 0xF3, 0x3F, 0x4C, 0xDF, 0x90, 0x72,
            0xC2, 0x18, 0xEC, 0xE1, 0xF3, 0x3F, 0x4E, 0xE0, 0x90, 0xCF, 0x51, 0xDB, 0xE1, 0x0A,
            0xF4, 0x3F, 0x51, 0xE0, 0x90, 0x2B, 0xE1, 0x9D, 0xD7, 0x33, 0xF4, 0x3F, 0x53, 0xE1,
            0x90, 0x87, 0x70, 0x60, 0xCD, 0x5C, 0xF4, 0x3F, 0x55, 0xE1, 0x90, 0xE3, 0xFF, 0x22,
            0xC3, 0x85, 0xF4, 0x3F, 0x57, 0xE2, 0x90, 0x3F, 0x8F, 0xE5, 0xB8, 0xAE, 0xF4, 0x3F,
            0x59, 0xE2, 0x90, 0x9B, 0x1E, 0xA8, 0xAE, 0xD7, 0xF4, 0x3F, 0x5C, 0xE3, 0x90, 0xF8,
            0xAD, 0x6A, 0xA4, 0x00, 0xF5, 0x3F, 0x5E, 0xE3, 0x90, 0x54, 0x3D, 0x2D, 0x9A, 0x29,
            0xF5, 0x3F, 0x60, 0xE4, 0x90, 0xB0, 0xCC, 0xEF, 0x8F, 0x52, 0xF5, 0x3F, 0x62, 0xE4,
            0x90, 0x0C, 0x5C, 0xB2, 0x85, 0x7B, 0xF5, 0x3F, 0x64, 0xE4, 0x90, 0x69, 0xEB, 0x74,
            0x7B, 0xA4, 0xF5, 0x3F, 0x66, 0xE5, 0x90, 0xC5, 0x7A, 0x37, 0x71, 0xCD, 0xF5, 0x3F,
            0x68, 0xE5, 0x90, 0x21, 0x0A, 0xFA, 0x66, 0xF6, 0xF5, 0x3F, 0x6B, 0xE5, 0x90, 0x7D,
            0x99, 0xBC, 0x5C, 0x1F, 0xF6, 0x3F, 0x6D, 0xE6, 0x90, 0xD9, 0x28, 0x7F, 0x52, 0x48,
            0xF6, 0x3F, 0x6F, 0xE6, 0x90, 0x35, 0xB8, 0x41, 0x48, 0x71, 0xF6, 0x3F, 0x71, 0xE6,
            0x90, 0x92, 0x47, 0x04, 0x3E, 0x9A, 0xF6, 0x3F, 0x73, 0xE6, 0x90, 0xEE, 0xD6, 0xC6,
            0x33, 0xC3, 0xF6, 0x3F, 0x75, 0xE7, 0x90, 0x4A, 0x66, 0x89, 0x29, 0xEC, 0xF6, 0x3F,
            0x77, 0xE7, 0x90, 0xA6, 0xF5, 0x4B, 0x1F, 0x15, 0xF7, 0x3F, 0x79, 0xE7, 0x90, 0x03,
            0x85, 0x0E, 0x15, 0x3E, 0xF7, 0x3F, 0x7B, 0xE7, 0x90, 0x5F, 0x14, 0xD1, 0x0A, 0x67,
            0xF7, 0x3F, 0x7D, 0xE7, 0x90, 0xBB, 0xA3, 0x93, 0x00, 0x90, 0xF7, 0x3F, 0x7F, 0xE7,
            0x90, 0x17, 0x33, 0x56, 0xF6, 0xB8, 0xF7, 0x3F, 0x80, 0xE7, 0x90, 0x73, 0xC2, 0x18,
            0xEC, 0xE1, 0xF7, 0x3F, 0x82, 0xE7, 0x90, 0xCF, 0x51, 0xDB, 0xE1, 0x0A, 0xF8, 0x3F,
            0x84, 0xE7, 0x90, 0x2C, 0xE1, 0x9D, 0xD7, 0x33, 0xF8, 0x3F, 0x86, 0xE7, 0x90, 0x88,
            0x70, 0x60, 0xCD, 0x5C, 0xF8, 0x3F, 0x88, 0xE8, 0x90, 0xE4, 0xFF, 0x22, 0xC3, 0x85,
            0xF8, 0x3F, 0x8A, 0xE7, 0x90, 0x40, 0x8F, 0xE5, 0xB8, 0xAE, 0xF8, 0x3F, 0x8C, 0xE7,
            0x90, 0x9D, 0x1E, 0xA8, 0xAE, 0xD7, 0xF8, 0x3F, 0x8D, 0xE7, 0x90, 0xF9, 0xAD, 0x6A,
            0xA4, 0x00, 0xF9, 0x3F, 0x8F, 0xE7, 0x90, 0x55, 0x3D, 0x2D, 0x9A, 0x29, 0xF9, 0x3F,
            0x91, 0xE7, 0x90, 0xB1, 0xCC, 0xEF, 0x8F, 0x52, 0xF9, 0x3F, 0x93, 0xE7, 0x90, 0x0D,
            0x5C, 0xB2, 0x85, 0x7B, 0xF9, 0x3F, 0x95, 0xE7, 0x90, 0x69, 0xEB, 0x74, 0x7B, 0xA4,
            0xF9, 0x3F, 0x96, 0xE7, 0x90, 0xC6, 0x7A, 0x37, 0x71, 0xCD, 0xF9, 0x3F, 0x98, 0xE7,
            0x90, 0x22, 0x0A, 0xFA, 0x66, 0xF6, 0xF9, 0x3F, 0x9A, 0xE7, 0x90, 0x7E, 0x99, 0xBC,
            0x5C, 0x1F, 0xFA, 0x3F, 0x9B, 0xE6, 0x90, 0xDA, 0x28, 0x7F, 0x52, 0x48, 0xFA, 0x3F,
            0x9D, 0xE6, 0x90, 0x37, 0xB8, 0x41, 0x48, 0x71, 0xFA, 0x3F, 0x9F, 0xE6, 0x90, 0x93,
            0x47, 0x04, 0x3E, 0x9A, 0xFA, 0x3F, 0xA0, 0xE6, 0x90, 0xEF, 0xD6, 0xC6, 0x33, 0xC3,
            0xFA, 0x3F, 0xA2, 0xE5, 0x90, 0x4B, 0x66, 0x89, 0x29, 0xEC, 0xFA, 0x3F, 0xA3, 0xE5,
            0x90, 0xA7, 0xF5, 0x4B, 0x1F, 0x15, 0xFB, 0x3F, 0xA5, 0xE5, 0x90, 0x03, 0x85, 0x0E,
            0x15, 0x3E, 0xFB, 0x3F, 0xA7, 0xE4, 0x90, 0x60, 0x14, 0xD1, 0x0A, 0x67, 0xFB, 0x3F,
            0xA8, 0xE4, 0x90, 0xBC, 0xA3, 0x93, 0x00, 0x90, 0xFB, 0x3F, 0xAA, 0xE4, 0x90, 0x18,
            0x33, 0x56, 0xF6, 0xB8, 0xFB, 0x3F, 0xAB, 0xE3, 0x90, 0x74, 0xC2, 0x18, 0xEC, 0xE1,
            0xFB, 0x3F, 0xAD, 0xE3, 0x90, 0xD1, 0x51, 0xDB, 0xE1, 0x0A, 0xFC, 0x3F, 0xAE, 0xE2,
            0x90, 0x2D, 0xE1, 0x9D, 0xD7, 0x33, 0xFC, 0x3F, 0xB0, 0xE2, 0x90, 0x89, 0x70, 0x60,
            0xCD, 0x5C, 0xFC, 0x3F, 0xB1, 0xE1, 0x90, 0xE5, 0xFF, 0x22, 0xC3, 0x85, 0xFC, 0x3F,
            0xB2, 0xE1, 0x90, 0x41, 0x8F, 0xE5, 0xB8, 0xAE, 0xFC, 0x3F, 0xB4, 0xE0, 0x90, 0x9D,
            0x1E, 0xA8, 0xAE, 0xD7, 0xFC, 0x3F, 0xB5, 0xE0, 0x90, 0xFA, 0xAD, 0x6A, 0xA4, 0x00,
            0xFD, 0x3F, 0xB7, 0xDF, 0x90, 0x56, 0x3D, 0x2D, 0x9A, 0x29, 0xFD, 0x3F, 0xB8, 0xDF,
            0x90, 0xB2, 0xCC, 0xEF, 0x8F, 0x52, 0xFD, 0x3F, 0xB9, 0xDE, 0x90, 0x0E, 0x5C, 0xB2,
            0x85, 0x7B, 0xFD, 0x3F, 0xBB, 0xDD, 0x90, 0x6B, 0xEB, 0x74, 0x7B, 0xA4, 0xFD, 0x3F,
            0xBC, 0xDD, 0x90, 0xC7, 0x7A, 0x37, 0x71, 0xCD, 0xFD, 0x3F, 0xBD, 0xDC, 0x90, 0x23,
            0x0A, 0xFA, 0x66, 0xF6, 0xFD, 0x3F, 0xBE, 0xDB, 0x90, 0x7F, 0x99, 0xBC, 0x5C, 0x1F,
            0xFE, 0x3F, 0xC0, 0xDB, 0x90, 0xDB, 0x28, 0x7F, 0x52, 0x48, 0xFE, 0x3F, 0xC1, 0xDA,
            0x90, 0x37, 0xB8, 0x41, 0x48, 0x71, 0xFE, 0x3F, 0xC2, 0xD9, 0x90, 0x94, 0x47, 0x04,
            0x3E, 0x9A, 0xFE, 0x3F, 0xC3, 0xD9, 0x90, 0xF0, 0xD6, 0xC6, 0x33, 0xC3, 0xFE, 0x3F,
            0xC4, 0xD8, 0x90, 0x4C, 0x66, 0x89, 0x29, 0xEC, 0xFE, 0x3F, 0xC6, 0xD7, 0x90, 0xA8,
            0xF5, 0x4B, 0x1F, 0x15, 0xFF, 0x3F, 0xC7, 0xD6, 0x90, 0x05, 0x85, 0x0E, 0x15, 0x3E,
            0xFF, 0x3F, 0xC8, 0xD5, 0x90, 0x61, 0x14, 0xD1, 0x0A, 0x67, 0xFF, 0x3F, 0xC9, 0xD5,
            0x90, 0xBD, 0xA3, 0x93, 0x00, 0x90, 0xFF, 0x3F, 0xCA, 0xD4, 0x90, 0x19, 0x33, 0x56,
            0xF6, 0xB8, 0xFF, 0x3F, 0xCB, 0xD3, 0x90, 0x75, 0xC2, 0x18, 0xEC, 0xE1, 0xFF, 0x3F,
            0xCC, 0xD2, 0xC8, 0xE8, 0xA8, 0xED, 0x70, 0x05, 0x00, 0x40, 0xCD, 0xD1, 0x48, 0x97,
            0xF0, 0xCE, 0xEB, 0x19, 0x00, 0x40, 0xCE, 0xD0, 0x48, 0x45, 0x38, 0xB0, 0x66, 0x2E,
            0x00, 0x40, 0xCF, 0xCF, 0x48, 0xF3, 0x7F, 0x91, 0xE1, 0x42, 0x00, 0x40, 0xD0, 0xCE,
            0x48, 0xA1, 0xC7, 0x72, 0x5C, 0x57, 0x00, 0x40, 0xD1, 0xCD, 0xC8, 0x4F, 0x0F, 0x54,
            0xD7, 0x6B, 0x00, 0x40, 0xD2, 0xCC, 0xC8, 0xFD, 0x56, 0x35, 0x52, 0x80, 0x00, 0x40,
            0xD3, 0xCB, 0xC8, 0xAB, 0x9E, 0x16, 0xCD, 0x94, 0x00, 0x40, 0xD4, 0xCA, 0xC8, 0x59,
            0xE6, 0xF7, 0x47, 0xA9, 0x00, 0x40, 0xD5, 0xC9, 0xC8, 0x07, 0x2E, 0xD9, 0xC2, 0xBD,
            0x00, 0x40, 0xD5, 0xC8, 0xC8, 0xB5, 0x75, 0xBA, 0x3D, 0xD2, 0x00, 0x40, 0xD6, 0xC7,
            0x48, 0x64, 0xBD, 0x9B, 0xB8, 0xE6, 0x00, 0x40, 0xD7, 0xC6, 0x48, 0x12, 0x05, 0x7D,
            0x33, 0xFB, 0x00, 0x40, 0xD8, 0xC4, 0x48, 0xC0, 0x4C, 0x5E, 0xAE, 0x0F, 0x01, 0x40,
            0xD9, 0xC3, 0x48, 0x6E, 0x94, 0x3F, 0x29, 0x24, 0x01, 0x40, 0xD9, 0xC2, 0xC8, 0x1C,
            0xDC, 0x20, 0xA4, 0x38, 0x01, 0x40, 0xDA, 0xC1, 0xC8, 0xCA, 0x23, 0x02, 0x1F, 0x4D,
            0x01, 0x40, 0xDB, 0xC0, 0xC8, 0x78, 0x6B, 0xE3, 0x99, 0x61, 0x01, 0x40, 0xDB, 0xBE,
            0xC8, 0x26, 0xB3, 0xC4, 0x14, 0x76, 0x01, 0x40, 0xDC, 0xBD, 0xC8, 0xD4, 0xFA, 0xA5,
            0x8F, 0x8A, 0x01, 0x40, 0xDD, 0xBC, 0xC8, 0x82, 0x42, 0x87, 0x0A, 0x9F, 0x01, 0x40,
            0xDD, 0xBB, 0x48, 0x31, 0x8A, 0x68, 0x85, 0xB3, 0x01, 0x40, 0xDE, 0xB9, 0x48, 0xDF,
            0xD1, 0x49, 0x00, 0xC8, 0x01, 0x40, 0xDF, 0xB8, 0x48, 0x8D, 0x19, 0x2B, 0x7B, 0xDC,
            0x01, 0x40, 0xDF, 0xB7, 0x48, 0x3B, 0x61, 0x0C, 0xF6, 0xF0, 0x01, 0x40, 0xE0, 0xB5,
            0xC8, 0xE9, 0xA8, 0xED, 0x70, 0x05, 0x02, 0x40, 0xE0, 0xB4, 0xC8, 0x97, 0xF0, 0xCE,
            0xEB, 0x19, 0x02, 0x40, 0xE1, 0xB2, 0xC8, 0x45, 0x38, 0xB0, 0x66, 0x2E, 0x02, 0x40,
            0xE1, 0xB1, 0xC8, 0xF3, 0x7F, 0x91, 0xE1, 0x42, 0x02, 0x40, 0xE2, 0xB0, 0xC8, 0xA1,
            0xC7, 0x72, 0x5C, 0x57, 0x02, 0x40, 0xE2, 0xAE, 0xC8, 0x4F, 0x0F, 0x54, 0xD7, 0x6B,
            0x02, 0x40, 0xE3, 0xAD, 0x48, 0xFE, 0x56, 0x35, 0x52, 0x80, 0x02, 0x40, 0xE3, 0xAB,
            0x48, 0xAC, 0x9E, 0x16, 0xCD, 0x94, 0x02, 0x40, 0xE4, 0xAA, 0x48, 0x5A, 0xE6, 0xF7,
            0x47, 0xA9, 0x02, 0x40, 0xE4, 0xA8, 0x48, 0x08, 0x2E, 0xD9, 0xC2, 0xBD, 0x02, 0x40,
            0xE4, 0xA7, 0xC8, 0xB6, 0x75, 0xBA, 0x3D, 0xD2, 0x02, 0x40, 0xE5, 0xA5, 0xC8, 0x64,
            0xBD, 0x9B, 0xB8, 0xE6, 0x02, 0x40, 0xE5, 0xA3, 0xC8, 0x12, 0x05, 0x7D, 0x33, 0xFB,
            0x02, 0x40, 0xE5, 0xA2, 0xC8, 0xC0, 0x4C, 0x5E, 0xAE, 0x0F, 0x03, 0x40, 0xE6, 0xA0,
            0xC8, 0x6E, 0x94, 0x3F, 0x29, 0x24, 0x03, 0x40, 0xE6, 0x9F, 0xC8, 0x1C, 0xDC, 0x20,
            0xA4, 0x38, 0x03, 0x40, 0xE6, 0x9D, 0x48, 0xCB, 0x23, 0x02, 0x1F, 0x4D, 0x03, 0x40,
            0xE6, 0x9B, 0x48, 0x79, 0x6B, 0xE3, 0x99, 0x61, 0x03, 0x40, 0xE7, 0x9A, 0x48, 0x27,
            0xB3, 0xC4, 0x14, 0x76, 0x03, 0x40, 0xE7, 0x98, 0x48, 0xD5, 0xFA, 0xA5, 0x8F, 0x8A,
            0x03, 0x40, 0xE7, 0x96, 0xC8, 0x83, 0x42, 0x87, 0x0A, 0x9F, 0x03, 0x40, 0xE7, 0x95,
            0xC8, 0x31, 0x8A, 0x68, 0x85, 0xB3, 0x03, 0x40, 0xE7, 0x93, 0xC8, 0xDF, 0xD1, 0x49,
            0x00, 0xC8, 0x03, 0x40, 0xE7, 0x91, 0xC8, 0x8D, 0x19, 0x2B, 0x7B, 0xDC, 0x03, 0x40,
            0xE7, 0x8F, 0xC8, 0x3B, 0x61, 0x0C, 0xF6, 0xF0, 0x03, 0x40, 0xE7, 0x8D, 0xC8, 0xE9,
            0xA8, 0xED, 0x70, 0x05, 0x04, 0x40, 0xE7, 0x8C, 0x48, 0x98, 0xF0, 0xCE, 0xEB, 0x19,
            0x04, 0x40, 0xE7, 0x8A, 0x48, 0x46, 0x38, 0xB0, 0x66, 0x2E, 0x04, 0x40, 0xE8, 0x88,
            0x48, 0xF4, 0x7F, 0x91, 0xE1, 0x42, 0x04, 0x40, 0xE7, 0x86, 0x48, 0xA2, 0xC7, 0x72,
            0x5C, 0x57, 0x04, 0x40, 0xE7, 0x84, 0xC8, 0x50, 0x0F, 0x54, 0xD7, 0x6B, 0x04, 0x40,
            0xE7, 0x82, 0xC8, 0xFE, 0x56, 0x35, 0x52, 0x80, 0x04, 0x40, 0xE7, 0x80, 0xC8, 0xAC,
            0x9E, 0x16, 0xCD, 0x94, 0x04, 0x40, 0xE7, 0x7F, 0xC8, 0x5A, 0xE6, 0xF7, 0x47, 0xA9,
            0x04, 0x40, 0xE7, 0x7D, 0xC8, 0x08, 0x2E, 0xD9, 0xC2, 0xBD, 0x04, 0x40, 0xE7, 0x7B,
            0xC8, 0xB6, 0x75, 0xBA, 0x3D, 0xD2, 0x04, 0x40, 0xE7, 0x79, 0x48, 0x65, 0xBD, 0x9B,
            0xB8, 0xE6, 0x04, 0x40, 0xE7, 0x77, 0x48, 0x13, 0x05, 0x7D, 0x33, 0xFB, 0x04, 0x40,
            0xE7, 0x75, 0x48, 0xC1, 0x4C, 0x5E, 0xAE, 0x0F, 0x05, 0x40, 0xE6, 0x73, 0x48, 0x6F,
            0x94, 0x3F, 0x29, 0x24, 0x05, 0x40, 0xE6, 0x71, 0xC8, 0x1D, 0xDC, 0x20, 0xA4, 0x38,
            0x05, 0x40, 0xE6, 0x6F, 0xC8, 0xCB, 0x23, 0x02, 0x1F, 0x4D, 0x05, 0x40, 0xE6, 0x6D,
            0xC8, 0x79, 0x6B, 0xE3, 0x99, 0x61, 0x05, 0x40, 0xE5, 0x6B, 0xC8, 0x27, 0xB3, 0xC4,
            0x14, 0x76, 0x05, 0x40, 0xE5, 0x68, 0xC8, 0xD5, 0xFA, 0xA5, 0x8F, 0x8A, 0x05, 0x40,
            0xE5, 0x66, 0xC8, 0x83, 0x42, 0x87, 0x0A, 0x9F, 0x05, 0x40, 0xE4, 0x64, 0x48, 0x32,
            0x8A, 0x68, 0x85, 0xB3, 0x05, 0x40, 0xE4, 0x62, 0x48, 0xE0, 0xD1, 0x49, 0x00, 0xC8,
            0x05, 0x40, 0xE4, 0x60, 0x48, 0x8E, 0x19, 0x2B, 0x7B, 0xDC, 0x05, 0x40, 0xE3, 0x5E,
            0x48, 0x3C, 0x61, 0x0C, 0xF6, 0xF0, 0x05, 0x40, 0xE3, 0x5C, 0xC8, 0xEA, 0xA8, 0xED,
            0x70, 0x05, 0x06, 0x40, 0xE2, 0x59, 0xC8, 0x98, 0xF0, 0xCE, 0xEB, 0x19, 0x06, 0x40,
            0xE2, 0x57, 0xC8, 0x46, 0x38, 0xB0, 0x66, 0x2E, 0x06, 0x40, 0xE1, 0x55, 0xC8, 0xF4,
            0x7F, 0x91, 0xE1, 0x42, 0x06, 0x40, 0xE1, 0x53, 0xC8, 0xA2, 0xC7, 0x72, 0x5C, 0x57,
            0x06, 0x40, 0xE0, 0x51, 0xC8, 0x50, 0x0F, 0x54, 0xD7, 0x6B, 0x06, 0x40, 0xE0, 0x4E,
            0x48, 0xFF, 0x56, 0x35, 0x52, 0x80, 0x06, 0x40, 0xDF, 0x4C, 0x48, 0xAD, 0x9E, 0x16,
            0xCD, 0x94, 0x06, 0x40, 0xDF, 0x4A, 0x48, 0x5B, 0xE6, 0xF7, 0x47, 0xA9, 0x06, 0x40,
            0xDE, 0x47, 0x48, 0x09, 0x2E, 0xD9, 0xC2, 0xBD, 0x06, 0x40, 0xDD, 0x45, 0xC8, 0xB7,
            0x75, 0xBA, 0x3D, 0xD2, 0x06, 0x40, 0xDD, 0x43, 0xC8, 0x65, 0xBD, 0x9B, 0xB8, 0xE6,
            0x06, 0x40, 0xDC, 0x41, 0xC8, 0x13, 0x05, 0x7D, 0x33, 0xFB, 0x06, 0x40, 0xDB, 0x3E,
            0xC8, 0xC1, 0x4C, 0x5E, 0xAE, 0x0F, 0x07, 0x40, 0xDB, 0x3C, 0xC8, 0x6F, 0x94, 0x3F,
            0x29, 0x24, 0x07, 0x40, 0xDA, 0x39, 0xC8, 0x1D, 0xDC, 0x20, 0xA4, 0x38, 0x07, 0x40,
            0xD9, 0x37, 0x48, 0xCC, 0x23, 0x02, 0x1F, 0x4D, 0x07, 0x40, 0xD9, 0x35, 0x48, 0x7A,
            0x6B, 0xE3, 0x99, 0x61, 0x07, 0x40, 0xD8, 0x32, 0x48, 0x28, 0xB3, 0xC4, 0x14, 0x76,
            0x07, 0x40, 0xD7, 0x30, 0x48, 0xD6, 0xFA, 0xA5, 0x8F, 0x8A, 0x07, 0x40, 0xD6, 0x2D,
            0xC8, 0x84, 0x42, 0x87, 0x0A, 0x9F, 0x07, 0x40, 0xD5, 0x2B, 0xC8, 0x32, 0x8A, 0x68,
            0x85, 0xB3, 0x07, 0x40, 0xD5, 0x28, 0xC8, 0xE0, 0xD1, 0x49, 0x00, 0xC8, 0x07, 0x40,
            0xD4, 0x26, 0xC8, 0x8E, 0x19, 0x2B, 0x7B, 0xDC, 0x07, 0x40, 0xD3, 0x23, 0xC8, 0x3C,
            0x61, 0x0C, 0xF6, 0xF0, 0x07, 0x40, 0xD2, 0x21, 0xC8, 0xEA, 0xA8, 0xED, 0x70, 0x05,
            0x08, 0x40, 0xD1, 0x1E, 0x48, 0x99, 0xF0, 0xCE, 0xEB, 0x19, 0x08, 0x40, 0xD0, 0x1C,
            0x48, 0x47, 0x38, 0xB0, 0x66, 0x2E, 0x08, 0x40, 0xCF, 0x19, 0x48, 0xF5, 0x7F, 0x91,
            0xE1, 0x42, 0x08, 0x40, 0xCE, 0x17, 0x48, 0xA3, 0xC7, 0x72, 0x5C, 0x57, 0x08, 0x40,
            0xCD, 0x14, 0xC8, 0x51, 0x0F, 0x54, 0xD7, 0x6B, 0x08, 0x40, 0xCC, 0x12, 0xC8, 0xFF,
            0x56, 0x35, 0x52, 0x80, 0x08, 0x40, 0xCB, 0x0F, 0xC8, 0xAD, 0x9E, 0x16, 0xCD, 0x94,
            0x08, 0x40, 0xCA, 0x0D, 0xC8, 0x5B, 0xE6, 0xF7, 0x47, 0xA9, 0x08, 0x40, 0xC9, 0x0A,
            0xC8, 0x09, 0x2E, 0xD9, 0xC2, 0xBD, 0x08, 0x40, 0xC8, 0x07, 0xC8, 0xB7, 0x75, 0xBA,
            0x3D, 0xD2, 0x08, 0x40, 0xC7, 0x05, 0x48, 0x66, 0xBD, 0x9B, 0xB8, 0xE6, 0x08, 0x40,
            0xC6, 0x02, 0x48, 0x14, 0x05, 0x7D, 0x33, 0xFB, 0x08, 0x40, 0xC4, 0xFF, 0x48, 0xC2,
            0x4C, 0x5E, 0xAE, 0x0F, 0x09, 0x40, 0xC3, 0xFD, 0x48, 0x70, 0x94, 0x3F, 0x29, 0x24,
            0x09, 0x40, 0xC2, 0xFA, 0xC8, 0x1E, 0xDC, 0x20, 0xA4, 0x38, 0x09, 0x40, 0xC1, 0xF7,
            0xC8, 0xCC, 0x23, 0x02, 0x1F, 0x4D, 0x09, 0x40, 0xC0, 0xF5, 0xC8, 0x7A, 0x6B, 0xE3,
            0x99, 0x61, 0x09, 0x40, 0xBE, 0xF2, 0xC8, 0x28, 0xB3, 0xC4, 0x14, 0x76, 0x09, 0x40,
            0xBD, 0xEF, 0xC8, 0xD6, 0xFA, 0xA5, 0x8F, 0x8A, 0x09, 0x40, 0xBC, 0xED, 0xC8, 0x84,
            0x42, 0x87, 0x0A, 0x9F, 0x09, 0x40, 0xBB, 0xEA, 0x48, 0x33, 0x8A, 0x68, 0x85, 0xB3,
            0x09, 0x40, 0xB9, 0xE7, 0x48, 0xE1, 0xD1, 0x49, 0x00, 0xC8, 0x09, 0x40, 0xB8, 0xE4,
            0x48, 0x8F, 0x19, 0x2B, 0x7B, 0xDC, 0x09, 0x40, 0xB7, 0xE2, 0x48, 0x3D, 0x61, 0x0C,
            0xF6, 0xF0, 0x09, 0x40, 0xB5, 0xDF, 0xC8, 0xEB, 0xA8, 0xED, 0x70, 0x05, 0x0A, 0x40,
            0xB4, 0xDC, 0xC8, 0x99, 0xF0, 0xCE, 0xEB, 0x19, 0x0A, 0x40, 0xB2, 0xD9, 0xC8, 0x47,
            0x38, 0xB0, 0x66, 0x2E, 0x0A, 0x40, 0xB1, 0xD6, 0xC8, 0xF5, 0x7F, 0x91, 0xE1, 0x42,
            0x0A, 0x40, 0xB0, 0xD4, 0xC8, 0xA3, 0xC7, 0x72, 0x5C, 0x57, 0x0A, 0x40, 0xAE, 0xD1,
            0xC8, 0x51, 0x0F, 0x54, 0xD7, 0x6B, 0x0A, 0x40, 0xAD, 0xCE, 0x48, 0x00, 0x57, 0x35,
            0x52, 0x80, 0x0A, 0x40, 0xAB, 0xCB, 0x48, 0xAE, 0x9E, 0x16, 0xCD, 0x94, 0x0A, 0x40,
            0xAA, 0xC8, 0x48, 0x5C, 0xE6, 0xF7, 0x47, 0xA9, 0x0A, 0x40, 0xA8, 0xC6, 0x48, 0x0A,
            0x2E, 0xD9, 0xC2, 0xBD, 0x0A, 0x40, 0xA7, 0xC3, 0xC8, 0xB8, 0x75, 0xBA, 0x3D, 0xD2,
            0x0A, 0x40, 0xA5, 0xC0, 0xC8, 0x66, 0xBD, 0x9B, 0xB8, 0xE6, 0x0A, 0x40, 0xA3, 0xBD,
            0xC8, 0x14, 0x05, 0x7D, 0x33, 0xFB, 0x0A, 0x40, 0xA2, 0xBA, 0xC8, 0xC2, 0x4C, 0x5E,
            0xAE, 0x0F, 0x0B, 0x40, 0xA0, 0xB7, 0xC8, 0x70, 0x94, 0x3F, 0x29, 0x24, 0x0B, 0x40,
            0x9F, 0xB4, 0xC8, 0x1E, 0xDC, 0x20, 0xA4, 0x38, 0x0B, 0x40, 0x9D, 0xB1, 0x48, 0xCD,
            0x23, 0x02, 0x1F, 0x4D, 0x0B, 0x40, 0x9B, 0xAE, 0x48, 0x7B, 0x6B, 0xE3, 0x99, 0x61,
            0x0B, 0x40, 0x9A, 0xAC, 0x48, 0x29, 0xB3, 0xC4, 0x14, 0x76, 0x0B, 0x40, 0x98, 0xA9,
            0x48, 0xD7, 0xFA, 0xA5, 0x8F, 0x8A, 0x0B, 0x40, 0x96, 0xA6, 0xC8, 0x85, 0x42, 0x87,
            0x0A, 0x9F, 0x0B, 0x40, 0x95, 0xA3, 0xC8, 0x33, 0x8A, 0x68, 0x85, 0xB3, 0x0B, 0x40,
            0x93, 0xA0, 0xC8, 0xE1, 0xD1, 0x49, 0x00, 0xC8, 0x0B, 0x40, 0x91, 0x9D, 0xC8, 0x8F,
            0x19, 0x2B, 0x7B, 0xDC, 0x0B, 0x40, 0x8F, 0x9A, 0xC8, 0x3D, 0x61, 0x0C, 0xF6, 0xF0,
            0x0B, 0x40, 0x8D, 0x97, 0xC8, 0xEB, 0xA8, 0xED, 0x70, 0x05, 0x0C, 0x40, 0x8C, 0x94,
            0x48, 0x9A, 0xF0, 0xCE, 0xEB, 0x19, 0x0C, 0x40, 0x8A, 0x91, 0x48, 0x48, 0x38, 0xB0,
            0x66, 0x2E, 0x0C, 0x40, 0x88, 0x8E, 0x48, 0xF6, 0x7F, 0x91, 0xE1, 0x42, 0x0C, 0x40,
            0x86, 0x8B, 0x48, 0xA4, 0xC7, 0x72, 0x5C, 0x57, 0x0C, 0x40, 0x84, 0x88, 0xC8, 0x52,
            0x0F, 0x54, 0xD7, 0x6B, 0x0C, 0x40, 0x82, 0x85, 0xC8, 0x00, 0x57, 0x35, 0x52, 0x80,
            0x0C, 0x40, 0x80, 0x82, 0xC8, 0xAE, 0x9E, 0x16, 0xCD, 0x94, 0x0C, 0x40, 0x7F, 0x7F,
            0xC8, 0x5C, 0xE6, 0xF7, 0x47, 0xA9, 0x0C, 0x40, 0x7D, 0x7C, 0xC8, 0x0A, 0x2E, 0xD9,
            0xC2, 0xBD, 0x0C, 0x40, 0x7B, 0x79, 0xC8, 0xB8, 0x75, 0xBA, 0x3D, 0xD2, 0x0C, 0x40,
            0x79, 0x76, 0x48, 0x67, 0xBD, 0x9B, 0xB8, 0xE6, 0x0C, 0x40, 0x77, 0x73, 0x48, 0x15,
            0x05, 0x7D, 0x33, 0xFB, 0x0C, 0x40, 0x75, 0x70, 0x48, 0xC3, 0x4C, 0x5E, 0xAE, 0x0F,
            0x0D, 0x40, 0x73, 0x6D, 0x48, 0x71, 0x94, 0x3F, 0x29, 0x24, 0x0D, 0x40, 0x71, 0x6A,
            0xC8, 0x1F, 0xDC, 0x20, 0xA4, 0x38, 0x0D, 0x40, 0x6F, 0x67, 0xC8, 0xCD, 0x23, 0x02,
            0x1F, 0x4D, 0x0D, 0x40, 0x6D, 0x64, 0xC8, 0x7B, 0x6B, 0xE3, 0x99, 0x61, 0x0D, 0x40,
            0x6B, 0x61, 0xC8, 0x29, 0xB3, 0xC4, 0x14, 0x76, 0x0D, 0x40, 0x68, 0x5E, 0xC8, 0xD7,
            0xFA, 0xA5, 0x8F, 0x8A, 0x0D, 0x40, 0x66, 0x5A, 0xC8, 0x85, 0x42, 0x87, 0x0A, 0x9F,
            0x0D, 0x40, 0x64, 0x57, 0x48, 0x34, 0x8A, 0x68, 0x85, 0xB3, 0x0D, 0x40, 0x62, 0x54,
            0x48, 0xE2, 0xD1, 0x49, 0x00, 0xC8, 0x0D, 0x40, 0x60, 0x51, 0x48, 0x90, 0x19, 0x2B,
            0x7B, 0xDC, 0x0D, 0x40, 0x5E, 0x4E, 0x48, 0x3E, 0x61, 0x0C, 0xF6, 0xF0, 0x0D, 0x40,
            0x5C, 0x4B, 0xC8, 0xEC, 0xA8, 0xED, 0x70, 0x05, 0x0E, 0x40, 0x59, 0x48, 0xC8, 0x9A,
            0xF0, 0xCE, 0xEB, 0x19, 0x0E, 0x40, 0x57, 0x45, 0xC8, 0x48, 0x38, 0xB0, 0x66, 0x2E,
            0x0E, 0x40, 0x55, 0x42, 0xC8, 0xF6, 0x7F, 0x91, 0xE1, 0x42, 0x0E, 0x40, 0x53, 0x3F,
            0xC8, 0xA4, 0xC7, 0x72, 0x5C, 0x57, 0x0E, 0x40, 0x51, 0x3C, 0xC8, 0x52, 0x0F, 0x54,
            0xD7, 0x6B, 0x0E, 0x40, 0x4E, 0x38, 0x48, 0x01, 0x57, 0x35, 0x52, 0x80, 0x0E, 0x40,
            0x4C, 0x35, 0x48, 0xAF, 0x9E, 0x16, 0xCD, 0x94, 0x0E, 0x40, 0x4A, 0x32, 0x48, 0x5D,
            0xE6, 0xF7, 0x47, 0xA9, 0x0E, 0x40, 0x47, 0x2F, 0x48, 0x0B, 0x2E, 0xD9, 0xC2, 0xBD,
            0x0E, 0x40, 0x45, 0x2C, 0xC8, 0xB9, 0x75, 0xBA, 0x3D, 0xD2, 0x0E, 0x40, 0x43, 0x29,
            0xC8, 0x67, 0xBD, 0x9B, 0xB8, 0xE6, 0x0E, 0x40, 0x41, 0x26, 0xC8, 0x15, 0x05, 0x7D,
            0x33, 0xFB, 0x0E, 0x40, 0x3E, 0x23, 0xC8, 0xC3, 0x4C, 0x5E, 0xAE, 0x0F, 0x0F, 0x40,
            0x3C, 0x1F, 0xC8, 0x71, 0x94, 0x3F, 0x29, 0x24, 0x0F, 0x40, 0x39, 0x1C, 0xC8, 0x1F,
            0xDC, 0x20, 0xA4, 0x38, 0x0F, 0x40, 0x37, 0x19, 0x48, 0xCE, 0x23, 0x02, 0x1F, 0x4D,
            0x0F, 0x40, 0x35, 0x16, 0x48, 0x7C, 0x6B, 0xE3, 0x99, 0x61, 0x0F, 0x40, 0x32, 0x13,
            0x48, 0x2A, 0xB3, 0xC4, 0x14, 0x76, 0x0F, 0x40, 0x30, 0x10, 0x48, 0xD8, 0xFA, 0xA5,
            0x8F, 0x8A, 0x0F, 0x40, 0x2D, 0x0D, 0xC8, 0x86, 0x42, 0x87, 0x0A, 0x9F, 0x0F, 0x40,
            0x2B, 0x09, 0xC8, 0x34, 0x8A, 0x68, 0x85, 0xB3, 0x0F, 0x40, 0x28, 0x06, 0xC8, 0xE2,
            0xD1, 0x49, 0x00, 0xC8, 0x0F, 0x40, 0x26, 0x03, 0xC8, 0x90, 0x19, 0x2B, 0x7B, 0xDC,
            0x0F, 0x40, 0x23, 0x00, 0xC8, 0x3E, 0x61, 0x0C, 0xF6, 0xF0, 0x0F, 0x40, 0x21, 0xFD,
            0x64, 0x76, 0xD4, 0x76, 0xB8, 0x02, 0x10, 0x40, 0x1E, 0xFA, 0xA4, 0x4D, 0x78, 0xE7,
            0xF5, 0x0C, 0x10, 0x40, 0x1C, 0xF7, 0xA4, 0x24, 0x1C, 0x58, 0x33, 0x17, 0x10, 0x40,
            0x19, 0xF4, 0xA4, 0xFB, 0xBF, 0xC8, 0x70, 0x21, 0x10, 0x40, 0x17, 0xF0, 0xA4, 0xD2,
            0x63, 0x39, 0xAE, 0x2B, 0x10, 0x40, 0x14, 0xED, 0xE4, 0xA9, 0x07, 0xAA, 0xEB, 0x35,
            0x10, 0x40, 0x12, 0xEA, 0xE4, 0x80, 0xAB, 0x1A, 0x29, 0x40, 0x10, 0x40, 0x0F, 0xE7,
            0xE4, 0x57, 0x4F, 0x8B, 0x66, 0x4A, 0x10, 0x40, 0x0D, 0xE4, 0xE4, 0x2E, 0xF3, 0xFB,
            0xA3, 0x54, 0x10, 0x40, 0x0A, 0xE1, 0xE4, 0x05, 0x97, 0x6C, 0xE1, 0x5E, 0x10, 0x40,
            0x07, 0xDE, 0xE4, 0xDC, 0x3A, 0xDD, 0x1E, 0x69, 0x10, 0x40, 0x05, 0xDA, 0x24, 0xB4,
            0xDE, 0x4D, 0x5C, 0x73, 0x10, 0x40, 0x02, 0xD7, 0x24, 0x8B, 0x82, 0xBE, 0x99, 0x7D,
            0x10, 0x40, 0xFF, 0xD4, 0x24, 0x62, 0x26, 0x2F, 0xD7, 0x87, 0x10, 0x40, 0xFD, 0xD1,
            0x24, 0x39, 0xCA, 0x9F, 0x14, 0x92, 0x10, 0x40, 0xFA, 0xCE, 0x64, 0x10, 0x6E, 0x10,
            0x52, 0x9C, 0x10, 0x40, 0xF7, 0xCB, 0x64, 0xE7, 0x11, 0x81, 0x8F, 0xA6, 0x10, 0x40,
            0xF5, 0xC8, 0x64, 0xBE, 0xB5, 0xF1, 0xCC, 0xB0, 0x10, 0x40, 0xF2, 0xC4, 0x64, 0x95,
            0x59, 0x62, 0x0A, 0xBB, 0x10, 0x40, 0xEF, 0xC1, 0x64, 0x6C, 0xFD, 0xD2, 0x47, 0xC5,
            0x10, 0x40, 0xED, 0xBE, 0x64, 0x43, 0xA1, 0x43, 0x85, 0xCF, 0x10, 0x40, 0xEA, 0xBB,
            0xA4, 0x1A, 0x45, 0xB4, 0xC2, 0xD9, 0x10, 0x40, 0xE7, 0xB8, 0xA4, 0xF1, 0xE8, 0x24,
            0x00, 0xE4, 0x10, 0x40, 0xE4, 0xB5, 0xA4, 0xC8, 0x8C, 0x95, 0x3D, 0xEE, 0x10, 0x40,
            0xE2, 0xB2, 0xA4, 0x9F, 0x30, 0x06, 0x7B, 0xF8, 0x10, 0x40, 0xDF, 0xAF, 0xE4, 0x76,
            0xD4, 0x76, 0xB8, 0x02, 0x11, 0x40, 0xDC, 0xAB, 0xE4, 0x4D, 0x78, 0xE7, 0xF5, 0x0C,
            0x11, 0x40, 0xD9, 0xA8, 0xE4, 0x24, 0x1C, 0x58, 0x33, 0x17, 0x11, 0x40, 0xD6, 0xA5,
            0xE4, 0xFB, 0xBF, 0xC8, 0x70, 0x21, 0x11, 0x40, 0xD4, 0xA2, 0xE4, 0xD2, 0x63, 0x39,
            0xAE, 0x2B, 0x11, 0x40, 0xD1, 0x9F, 0xE4, 0xA9, 0x07, 0xAA, 0xEB, 0x35, 0x11, 0x40,
            0xCE, 0x9C, 0x24, 0x81, 0xAB, 0x1A, 0x29, 0x40, 0x11, 0x40, 0xCB, 0x99,
        ];

        let (_pr_block, _position) = mdf3::PRBLOCK::read(&pr_data, true);

        //assert_eq!(position, 4349);
    }

    #[test]
    fn trblock() {
        let tr_data = [
            0x54, 0x52, 0x3A, 0x00, 0xB7, 0xE4, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xF3, 0x8C, 0xEF, 0x1E, 0x6B, 0x0E, 0x40,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x43, 0x43, 0x2E, 0x00, 0x01, 0x00, 0x10, 0xA4, 0x20, 0x1C, 0x58, 0x33,
            0x97, 0x3F, 0x12, 0x5B, 0x1A, 0xC4, 0x49, 0xD3, 0x28, 0x40, 0x73, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x43, 0x4E, 0xE4, 0x00, 0x63, 0xE7, 0x10, 0x00,
            0x65, 0xE5, 0x10, 0x00, 0xAE, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
            0x03, 0x00, 0x01, 0x00, 0x10, 0xA4, 0x20, 0x1C, 0x58, 0x33, 0x97, 0x3F, 0x12, 0x5B,
            0x1A, 0xC4, 0x49, 0xD3, 0x28, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x58,
        ];

        let (tr_block, position) = mdf3::TRBLOCK::read(&tr_data, true);

        assert_eq!(position, 58);
        assert_eq!(tr_block.block_size, 58);
        assert_eq!(tr_block.trigger_comment, 1107127);
        assert_eq!(tr_block.trigger_events_number, 2);
    }

    #[test]
    fn event() {}

    #[test]
    fn srblock() {}

    #[test]
    fn dgblock() {
        let dg_data = [
            0x44, 0x47, 0x1C, 0x00, 0xF4, 0xDF, 0x10, 0x00, 0x99, 0xE4, 0x10, 0x00, 0x2B, 0xE5,
            0x10, 0x00, 0xDC, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let (dg_block, position) = mdf3::DGBLOCK::read(&dg_data, true);

        assert_eq!(position, 28);
        assert_eq!(dg_block.next, 1105908);
        assert_eq!(dg_block.first, 1107097);
        assert_eq!(dg_block.trigger_block, 1107243);
        assert_eq!(dg_block.data_block, 988);
        assert_eq!(dg_block.group_number, 1);
        assert_eq!(dg_block.id_number, 0);
        assert_eq!(dg_block.reserved, 0);
    }

    #[test]
    fn cgblock() {
        let cg_data = [
            0x43, 0x47, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0xE1, 0x10, 0x00, 0x8A, 0xE4,
            0x10, 0x00, 0x01, 0x00, 0x02, 0x00, 0x09, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];

        let (cg_block, position) = mdf3::CGBLOCK::read(&cg_data, true);

        assert_eq!(position, 30);

        assert_eq!(cg_block.next, 0);
        assert_eq!(cg_block.first, 1106222);
        assert_eq!(cg_block.comment, 1107082);
        assert_eq!(cg_block.record_id, 1);
        assert_eq!(cg_block.channel_number, 2);
        assert_eq!(cg_block.record_size, 9);
        assert_eq!(cg_block.record_number, 124);
        assert_eq!(cg_block.first_sample_reduction_block, 0);
    }

    #[test]
    fn cnblock() {
        let cn_data = [
            0x43, 0x4E, 0xE4, 0x00, 0xA6, 0xE3, 0x10, 0x00, 0x80, 0xE0, 0x10, 0x00, 0xAE, 0xE0,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x74, 0x69,
            0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x19,
            0x60, 0x9C, 0xAE, 0xDD, 0xBC, 0x3F, 0x52, 0xE8, 0x62, 0xFA, 0x56, 0xD3, 0x28, 0x40,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x58, 0x2B, 0x00, 0x41, 0x53, 0x41, 0x4D, 0x2E, 0x4D,
            0x2E, 0x53, 0x43, 0x41, 0x4C, 0x41, 0x52, 0x2E, 0x53, 0x42, 0x59, 0x54, 0x45, 0x2E,
            0x49, 0x44, 0x45, 0x4E, 0x54, 0x49, 0x43, 0x41, 0x4C, 0x2E, 0x44, 0x49, 0x53, 0x43,
            0x52, 0x45, 0x54, 0x45, 0x00, 0x54, 0x58, 0xBB,
        ];

        let (cn_block, _position) = mdf3::CNBLOCK::read(&cn_data, true);

        //assert_eq!(position, 228);
        assert_eq!(cn_block.block_size, 228);
        assert_eq!(cn_block.next, 1106854);
        assert_eq!(cn_block.conversion_formula, 1106048);
        assert_eq!(cn_block.source_ext, 1106094);
        assert_eq!(cn_block.dependency, 0);
        assert_eq!(cn_block.comment, 0);
        assert_eq!(cn_block.channel_type, 1);
        assert!(utils::eq(
            &cn_block.short_name,
            &[
                0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ]
        ));

        assert!(utils::eq(
            &cn_block.desc,
            &[
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]
        ));
        assert_eq!(cn_block.start_offset, 0);
        assert_eq!(cn_block.bit_number, 64);
        assert_eq!(cn_block.data_type, 3);
        assert_eq!(cn_block.value_range_valid, 1);
        assert_eq!(
            cn_block.signal_min,
            utils::read_f64(
                &[0x04, 0x19, 0x60, 0x9C, 0xAE, 0xDD, 0xBC, 0x3F,],
                true,
                &mut (0 as usize)
            )
        );
        assert_eq!(
            cn_block.signal_max,
            utils::read_f64(
                &[0x52, 0xE8, 0x62, 0xFA, 0x56, 0xD3, 0x28, 0x40,],
                true,
                &mut (0 as usize)
            )
        );
        assert_eq!(cn_block.sample_rate, 0.0);
        assert_eq!(cn_block.display_name, 0);
        assert_eq!(cn_block.addition_byte_offset, 0);
    }

    #[test]
    fn ccblock() {
        let cc_data = [
            0x43, 0x43, 0x2E, 0x00, 0x01, 0x00, 0x04, 0x19, 0x60, 0x9C, 0xAE, 0xDD, 0xBC, 0x3F,
            0x52, 0xE8, 0x62, 0xFA, 0x56, 0xD3, 0x28, 0x40, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0x00, 0x00, 0x43, 0x45, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x43, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x69, 0x6E, 0x73, 0x65,
            0x72, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6F, 0x6E,
            0x20, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4E, 0xE4, 0x00, 0xA6, 0xE3, 0x10, 0x00,
            0x80, 0xE0, 0x10, 0x00, 0xAE, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let (cc_block, position) = mdf3::CCBLOCK::read(&cc_data, true);

        assert_eq!(position, 47); // should match the block size
        assert_eq!(cc_block.block_size, 46);
        assert_eq!(cc_block.physical_range_valid, 1);
        assert_eq!(
            cc_block.physical_min,
            utils::read_f64(
                &[0x04, 0x19, 0x60, 0x9C, 0xAE, 0xDD, 0xBC, 0x3F],
                true,
                &mut (0 as usize)
            )
        );
        assert_eq!(
            cc_block.physical_max,
            utils::read_f64(
                &[0x52, 0xE8, 0x62, 0xFA, 0x56, 0xD3, 0x28, 0x40],
                true,
                &mut (0 as usize)
            )
        );
        assert!(utils::eq(
            &cc_block.unit,
            &[
                0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]
        ));

        assert_eq!(cc_block.conversion_type, 65535);
        assert_eq!(cc_block.size_info, 0);
        // assert_eq!(conversion_data: ConversionData,);
    }

    #[test]
    fn conversion_linear() {}

    #[test]
    fn conversion_poly() {}

    #[test]
    fn conversion_exponential() {}

    #[test]
    fn conversion_log() {}

    #[test]
    fn conversion_rational() {}

    #[test]
    fn conversion_tabular() {}

    #[test]
    fn table_entry() {}

    #[test]
    fn conversion_text_formula() {}

    #[test]
    fn conversion_text_table() {}

    #[test]
    fn text_table_entry() {}

    #[test]
    fn conversion_text_range_table() {}

    #[test]
    fn text_range() {}

    #[test]
    fn date_struct() {}

    #[test]
    fn time_struct() {}

    #[test]
    fn cdblock() {
        //     let cd_data = [
        //         0x43, 0x44, 0x01, 0xA8, 0x0C, 0x70, 0xD4, 0x01, 0x90, 0x0B, 0x7E, 0xAF, 0x7C, 0x11,
        //         0xF4, 0x3F, 0x44, 0x7C, 0xE0, 0x9C, 0x03, 0x00, 0x00, 0x18, 0x7C, 0xE0, 0x44, 0x70,
        //         0x00, 0x00, 0xD4, 0x43, 0x0C, 0xD4, 0x38, 0x03, 0x00, 0x00, 0x39, 0x00, 0x18, 0x7C,
        //         0x00, 0x00, 0x00, 0x60, 0x43, 0x44, 0x01, 0xA8, 0x0C, 0x70, 0xD4, 0x01, 0x90, 0xC7,
        //         0xF2, 0x42, 0x95, 0x15, 0xF4, 0x3F, 0x44, 0x7C, 0xE0, 0x9C, 0x03, 0x00, 0x00, 0x18,
        //         0x7C, 0xE0, 0x44, 0x70, 0x00, 0x00, 0xD4, 0x43, 0x0C, 0xD4, 0x38, 0x03, 0x00, 0x00,
        //         0x39, 0x00, 0x18, 0x7C, 0x00, 0x00, 0x00, 0x60, 0x43, 0x44, 0x01, 0xA8, 0x0C, 0x70,
        //         0xD4, 0x01, 0x90, 0x84, 0x67, 0xD6, 0xAD, 0x19, 0xF4, 0x3F, 0x44, 0x7C, 0xE0, 0x9C,
        //         0x03,
        //     ];

        //     let (cd_block, position) = mdf3::CDBLOCK::read(&cd_data, true);

        //     assert_eq!(position, 0);
    }

    #[test]
    fn signal() {}

    #[test]
    fn ceblock() {
        let ce_data = [
            0x43, 0x45, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x68,
            0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x69, 0x6E, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
            0x20, 0x62, 0x79, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6F, 0x6E, 0x20, 0x53, 0x63, 0x72,
            0x69, 0x70, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x43, 0x4E, 0xE4, 0x00, 0xA6, 0xE3, 0x10, 0x00, 0x80, 0xE0, 0x10, 0x00,
            0xAE, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let (ce_block, _position) = mdf3::CEBLOCK::read(&ce_data, true);

        // assert_eq!(position, 0);
        assert_eq!(ce_block.block_size, 128);
        assert_eq!(ce_block.extension_type, 2);
    }

    // #[test]
    // fn supplement() {}

    // #[test]
    // fn dimblock() {}

    // #[test]
    // fn vector_block() {}
}
