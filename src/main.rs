use mdf_rust::mdf3;

use std::str;




fn main() {

	let file: [u8; 64] = [
		0x4D, 0x44, 0x46, 0x20, 
		0x20, 0x20, 0x20, 0x20, 
		0x33, 0x2E, 0x33, 0x30, 
		0x00, 0x00, 0x00, 0x00, 
		0x61, 0x6D, 0x64, 0x66, 
		0x36, 0x34, 0x34, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x4A, 0x01, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00,];
	let (header, little_endian) = mdf3::read(&file);

	println!("File ID: ");
	for u in header.file_id {
		println!("{}", u);
	}

	println!("File ID: {}", str::from_utf8(&header.file_id).expect("msg"));



	let hd = [
		0x48, 0x44, 0xD0, 0x00, 
		0xD8, 0xDF, 0x10, 0x00, 
		0x10, 0x01, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x06, 0x00, 0x32, 0x32, 
		0x3A, 0x31, 0x31, 0x3A, 
		0x32, 0x30, 0x31, 0x38, 
		0x31, 0x34, 0x3A, 0x32, 
		0x36, 0x3A, 0x33, 0x35, 
		0x4A, 0x61, 0x63, 0x6B, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x29, 0x46, 0xF9, 
		0x75, 0x78, 0x69, 0x15, 
		0x00, 0x00, 0x00, 0x00, 
		0x4C, 0x6F, 0x63, 0x61, 
		0x6C, 0x20, 0x50, 0x43, 
		0x20, 0x52, 0x65, 0x66, 
		0x65, 0x72, 0x65, 0x6E, 
		0x63, 0x65, 0x20, 0x54, 
		0x69, 0x6D, 0x65, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 
		0x54, 0x58, 0xCC, 0x02, 
		0x3C, 0x48, 0x44, 0x63, 
		0x6F, 0x6D, 0x6D, 0x65, 
		0x6E, 0x74, 0x20, 0x78, 
	];

	let (head, position) = mdf3::read_head(&hd, little_endian);

	println!("Block Type: {}", str::from_utf8(&head.block_type).expect(""));
	println!("Position: {}", position);

	// let check= pop(&file[0..3]);

	// println!("Double check: {}", check[2]);

}

// fn pop(barry: &[u8]) -> [u8; 3] {
//     barry.try_into().expect("slice with incorrect length")
// }
