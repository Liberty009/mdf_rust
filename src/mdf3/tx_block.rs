use crate::utils;

use super::mdf3_block::Mdf3Block;

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Txblock {
    block_type: [u8; 2],
    block_size: u16,
    text: Vec<u8>,
}

impl Mdf3Block for Txblock {
    fn read(stream: &[u8], position: usize, little_endian: bool) -> (usize, Self) {
        let mut pos = position;

        let block_type: [u8; 2] = utils::read(stream, little_endian, &mut pos);
        if !utils::eq(&block_type, "TX".as_bytes()) {
            panic!(
                "TXBLOCK type incorrect. Found : {}, {}",
                block_type[0], block_type[1]
            );
        }
        let block_size = utils::read(stream, little_endian, &mut pos);

        let mut text: Vec<u8> = stream[pos..pos + block_size as usize - 5]
            .try_into()
            .expect("msg");

        // make sure that the text is utf8
        for c in &mut text {
            if 128 < *c {
                *c = 32;
            }
        }
        pos += text.len();

        (
            pos,
            Txblock {
                block_type,
                block_size,
                text,
            },
        )
    }

    fn write(&self, _start_position: usize, little_endian: bool) -> Vec<u8> {
        let mut array = Vec::new();
        array.append(&mut self.block_type.to_vec());
        array.append(&mut utils::write(self.block_size, little_endian));
        array.append(&mut self.text.clone());
        array
    }
}

impl Txblock {
    pub fn name(self) -> String {
        //let mut name = "".to_string();

        //let (tx, _pos) = Self::read(stream, little_endian);

        utils::extract_name(&self.text)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn read() {
        let tx_data = [
            0x54, 0x58, 0xCC, 0x02, 0x3C, 0x48, 0x44, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74,
            0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
            0x2F, 0x77, 0x77, 0x77, 0x2E, 0x61, 0x73, 0x61, 0x6D, 0x2E, 0x6E, 0x65, 0x74, 0x2F,
            0x6D, 0x64, 0x66, 0x2F, 0x76, 0x34, 0x22, 0x3E, 0x3C, 0x54, 0x58, 0x3E, 0x44, 0x61,
            0x74, 0x65, 0x3A, 0x20, 0x32, 0x32, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x31, 0x38,
            0x0D, 0x0A, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x31, 0x35, 0x3A, 0x32, 0x37, 0x0D,
            0x0A, 0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x44, 0x75, 0x72,
            0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A, 0x31,
            0x32, 0x0D, 0x0A, 0xA7, 0x40, 0x0D, 0x0A, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
            0x65, 0x3A, 0x20, 0x54, 0x65, 0x73, 0x74, 0x0D, 0x0A, 0x45, 0x78, 0x70, 0x65, 0x72,
            0x69, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6D,
            0x65, 0x6E, 0x74, 0x0D, 0x0A, 0x57, 0x6F, 0x72, 0x6B, 0x73, 0x70, 0x61, 0x63, 0x65,
            0x3A, 0x20, 0x57, 0x6F, 0x72, 0x6B, 0x73, 0x70, 0x61, 0x63, 0x65, 0x0D, 0x0A, 0x44,
            0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3A, 0x20, 0x45, 0x54, 0x4B, 0x20, 0x74, 0x65,
            0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3A, 0x31, 0x0D, 0x0A, 0x50,
            0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
            0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x41, 0x53, 0x41, 0x50, 0x32, 0x5F, 0x44, 0x65,
            0x6D, 0x6F, 0x5F, 0x56, 0x31, 0x37, 0x31, 0x0D, 0x0A, 0x57, 0x50, 0x3A, 0x20, 0x41,
            0x53, 0x41, 0x50, 0x32, 0x5F, 0x44, 0x65, 0x6D, 0x6F, 0x5F, 0x56, 0x31, 0x37, 0x31,
            0x5F, 0x31, 0x0D, 0x0A, 0x52, 0x50, 0x3A, 0x20, 0x41, 0x53, 0x41, 0x50, 0x32, 0x5F,
            0x44, 0x65, 0x6D, 0x6F, 0x5F, 0x56, 0x31, 0x37, 0x31, 0x0D, 0x0A, 0x44, 0x61, 0x74,
            0x65, 0x3A, 0x20, 0x31, 0x31, 0x2F, 0x32, 0x32, 0x2F, 0x32, 0x30, 0x31, 0x38, 0x0D,
            0x0A, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x30, 0x33, 0x3A, 0x32, 0x36, 0x3A, 0x33,
            0x35, 0x20, 0x50, 0x4D, 0x0D, 0x0A, 0x50, 0x72, 0x65, 0x2D, 0x74, 0x72, 0x69, 0x67,
            0x67, 0x65, 0x72, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x30, 0x5B, 0x73, 0x5D,
            0x0D, 0x0A, 0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x44, 0x75,
            0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A,
            0x31, 0x32, 0x0D, 0x0A, 0x50, 0x6F, 0x73, 0x74, 0x2D, 0x74, 0x72, 0x69, 0x67, 0x67,
            0x65, 0x72, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x30, 0x5B, 0x73, 0x5D, 0x3C,
            0x2F, 0x54, 0x58, 0x3E, 0x3C, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x73, 0x6F, 0x75, 0x72,
            0x63, 0x65, 0x3E, 0x49, 0x4E, 0x43, 0x41, 0x20, 0x50, 0x43, 0x20, 0x52, 0x65, 0x66,
            0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x3C, 0x2F, 0x74,
            0x69, 0x6D, 0x65, 0x5F, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x3E, 0x3C, 0x63, 0x6F,
            0x6D, 0x6D, 0x6F, 0x6E, 0x5F, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
            0x73, 0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x73, 0x75, 0x62,
            0x6A, 0x65, 0x63, 0x74, 0x22, 0x3E, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69,
            0x63, 0x6C, 0x65, 0x3C, 0x2F, 0x65, 0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65,
            0x3D, 0x22, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x22, 0x3E, 0x50, 0x32, 0x30,
            0x31, 0x36, 0x5F, 0x30, 0x39, 0x5F, 0x41, 0x45, 0x5F, 0x4D, 0x43, 0x44, 0x5F, 0x32,
            0x4D, 0x43, 0x5F, 0x42, 0x53, 0x5F, 0x56, 0x31, 0x5F, 0x37, 0x5F, 0x31, 0x5F, 0x6D,
            0x61, 0x69, 0x6E, 0x3C, 0x2F, 0x65, 0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65,
            0x3D, 0x22, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3E,
            0x43, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x3C, 0x2F, 0x65,
            0x3E, 0x3C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x61, 0x75, 0x74, 0x68,
            0x6F, 0x72, 0x22, 0x3E, 0x55, 0x73, 0x65, 0x72, 0x4E, 0x61, 0x6D, 0x65, 0x3C, 0x2F,
            0x65, 0x3E, 0x3C, 0x2F, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x5F, 0x70, 0x72, 0x6F,
            0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3E, 0x3C, 0x2F, 0x48, 0x44, 0x63, 0x6F,
            0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x3E, 0x0A, 0x53, 0x61, 0x74, 0x20, 0x4F, 0x63, 0x74,
            0x20, 0x20, 0x32, 0x20, 0x31, 0x35, 0x3A, 0x33, 0x35, 0x3A, 0x31, 0x33, 0x20, 0x32,
            0x30, 0x32, 0x31, 0x3A, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
            0x79, 0x20, 0x61, 0x73, 0x61, 0x6D, 0x6D, 0x64, 0x66, 0x20, 0x36, 0x2E, 0x34, 0x2E,
            0x34, 0x00, 0x04, 0x19, 0x60, 0x9C, 0xAE, 0xDD, 0xBC, 0x3F, 0x00,
        ];

        let text = r#"<HDcomment xmlns="http://www.asam.net/mdf/v4"><TX>Date: 22.11.2018
		Time: 15:27
		Recording Duration: 00:00:12
		 @
		Database: Test
		Experiment: Experiment
		Workspace: Workspace
		Devices: ETK test device:1
		Program Description: ASAP2_Demo_V171
		WP: ASAP2_Demo_V171_1
		RP: ASAP2_Demo_V171
		Date: 11/22/2018
		Time: 03:26:35 PM
		Pre-trigger Time: 0[s]
		Recording Duration: 00:00:12
		Post-trigger Time: 0[s]</TX><time_source>INCA PC Reference Time</time_source><common_properties><e name="subject">TestVehicle</e><e name="project">P2016_09_AE_MCD_2MC_BS_V1_7_1_main</e><e name="department">CompanyName</e><e name="author">UserName</e></common_properties></HDcomment>
		Sat Oct  2 15:35:13 2021: updated by asammdf 6.4.4"#;

        let _text_bytes = text.as_bytes();

        let (position, _tx_block) = Txblock::read(&tx_data, 0, true);

        //println!("Pos: {}", position);
        //println!("String: {}END", str::from_utf8(&tx_block.text).expect(""));
        assert_eq!(position, 715);

        //println!("Found length: {}, Set Length: {}", tx_block.text.len(), text_bytes.len());
        //assert!(utils::eq(&tx_block.text, text_bytes));
    }

    #[test]
    fn write() {}
}
